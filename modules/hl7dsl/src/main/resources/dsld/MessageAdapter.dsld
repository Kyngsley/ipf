/*
 * Copyright 2011 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.codehaus.groovy.ast.ASTNode
import org.codehaus.groovy.ast.ClassNode
import org.codehaus.groovy.ast.MethodNode
import org.codehaus.groovy.ast.Parameter
import org.codehaus.groovy.ast.GenericsType
import org.codehaus.groovy.ast.ClassHelper
import org.codehaus.groovy.ast.expr.MapEntryExpression
import org.openehealth.ipf.modules.hl7dsl.*;
import java.util.List

/*
 * Debug the script according to 
 * http://blog.springsource.com/2011/08/02/debugging-dsld-scripts/
 * 
 * @author Mitko Kolev
 */

String GET_PREFIX = 'get'
Integer GET_PREFIX_LEN = GET_PREFIX.length()
String dslPackage = "org.openehealth.ipf.modules.hl7dsl."
String SELECTOR = "org.openehealth.ipf.modules.hl7dsl.SelectorClosure"

String GROUP_ADAPTER ='org.openehealth.ipf.modules.hl7dsl.GroupAdapter'
String SEGMENT_ADAPTER = 'org.openehealth.ipf.modules.hl7dsl.SegmentAdapter'
String MESSAGE_ADAPTER = 'org.openehealth.ipf.modules.hl7dsl.MessageAdapter'
String TYPE_ADAPTER = 'org.openehealth.ipf.modules.hl7dsl.TypeAdapter'
String PRIMITIVE_ADAPTER = 'org.openehealth.ipf.modules.hl7dsl.PrimitiveAdapter'

String GROUP = 'ca.uhn.hl7v2.model.AbstractGroup'
String SEGMENT = 'ca.uhn.hl7v2.model.Segment'
String TYPE = 'ca.uhn.hl7v2.model.Type'
String COMPOSITE = 'ca.uhn.hl7v2.model.Composite'

/*
 *  Trims the 'get' of the method to mimic the HL7 DSL style
 */
def buildDSLName = { MethodNode method ->
    String methodName = method.getName();
    String trimmed = methodName
    if (methodName.contains(GET_PREFIX)){
        trimmed = methodName.substring(GET_PREFIX_LEN);
    }
    trimmed
}
/*
 *  Returns a filled map, if the method is considered to have an int argument
 */
def buildParams = { MethodNode method ->
    def params = [:];
    for (Parameter p : method.getParameters()){
        params.put("repetition", ClassHelper.getWrapper(p.getType()))
    }
    params
}

def printGenericType = {String context,  GenericsType gt ->
    print(context)
    println("    GenericType " + gt)
    println("        name " + gt.getName())
    println("        reference  " + gt.type.redirect().is(gt.type))
    println("        placeHoder  " + gt.isPlaceholder())
    println("        resolved " + gt.isResolved())

}

//Checks if the given cn is a reference to class declaration
//Possible options are class declaration and a reference to class declaration
//The class declaration is meant to be a singleton (for a
//given run of the inferencing engine) and should not be changed.  The
//class references are mutable, but there are also multiple instances of  them (one for each reference).
def isReferenceToClassDeclaration = {ClassNode cn ->
    return cn.redirect().is(cn)
}

/*
 * Parses the return type of the method to infer the target extension class.
 */
def buildReturnType = { MethodNode method ->
    String methodReturnType = method.getReturnType().getName()
    return ClassHelper.getWrapper(ClassHelper.make(methodReturnType))
}


def isGroupReturnType = { MethodNode m ->
    String returnType = m.getReturnType().getName()
    return returnType.contains('.group.')
}

def isSegmentReturnType = { MethodNode m ->
    String returnType = m.getReturnType().getName()
    return returnType.contains('.segment.')
}

def isPublicGetter = { MethodNode m ->
    String returnType = m.getReturnType().getName()
    String name = m.getName()
    return m.isPublic() & !m.isStatic() & name.startsWith(GET_PREFIX)
}

def returnValue = { MethodNode method ->
    method.getReturnType().getName()
}

def isGroup = { ClassNode node ->
    return node.name.contains('.group.')
}
def isSegment= { ClassNode node ->
    return node.name.contains('.segment.')
}
def isType = { ClassNode node ->
    return node.name.contains('.datatype.')
}

def adapter = { ClassNode node ->
    ClassNode res = node;
    if (isSegment(node)){
        res = ClassHelper.make(SEGMENT_ADAPTER)
    }
    if (isGroup(node)){
        res = ClassHelper.make(GROUP_ADAPTER)
    }
    if (isType(node)){
        res = ClassHelper.make(TYPE_ADAPTER)
    }
    return res
}



/*
 *  Triggered when we have a parametrized MessageAdapter
 */
currentType(subType(MESSAGE_ADAPTER)  | subType(GROUP_ADAPTER)).accept {
   
    def gen = currentType?.genericsTypes
    if (gen && (gen.length == 1)) {
		def genericsType = gen[0].type
        delegatesTo genericsType
		
		for (MethodNode m: genericsType.getMethods()){
			if (isPublicGetter(m)){
				String dslName = buildDSLName(m);
				ClassNode returnType = buildReturnType(m);
				Map paramsMap = buildParams(m);
				if (isGroupReturnType(m)){
					if (paramsMap.isEmpty()){
						property name: dslName, type: returnType, declaringType : adapter(currentType), provider : "HL7 2.x DSL", doc : "Navigates to the first repetition of ${dslName}";
					} else {
						method name: dslName, type: returnType, declaringType: adapter(currentType),  params : paramsMap, provider : "HL7 2.x DSL", doc : "Access a repetition of ${dslName}";
						method name: dslName, type:returnType, declaringType:  adapter(currentType), provider : "HL7 2.x DSL",  doc : "Access all repetitions of ${dslName}";
					}
				}
				if (isSegmentReturnType(m)){
					if (paramsMap.isEmpty()){
						property name: dslName, type: returnType, declaringType : adapter(currentType), provider : "HL7 2.x DSL", doc : "Navigates to the first repetition of ${dslName}";
					} else {
						method name: dslName, type: returnType, declaringType: adapter(currentType),  params : paramsMap, provider : "HL7 2.x DSL", doc : "Access a repetition of ${dslName}";
						method name: dslName, type:returnType, declaringType:  adapter(currentType), provider : "HL7 2.x DSL",  doc : "Access all repetitions of ${dslName}";
					}
				}
			}
		}
	}
}


/*
 * Group
 */
currentType(subType(GROUP) & fileExtension('groovy')).accept {

    for (MethodNode m: currentType.getMethods()){
        if (isPublicGetter(m)){
            String dslName = buildDSLName(m);
            ClassNode returnType = buildReturnType(m);
            Map paramsMap = buildParams(m);
			def declType = adapter(currentType)
            if (isGroupReturnType(m)){
                if (paramsMap.isEmpty()){
                    property name: dslName, type: returnType, declaringType : declType, provider : "HL7 2.x DSL - Group", doc : "Navigates to the first repetition of ${dslName}";
                } else {
                    method name: dslName, type:returnType, declaringType: declType,  params : paramsMap, provider : "HL7 2.x DSL - Group", doc : "Access a repetition of ${dslName}";
                    method name: dslName, type:returnType, declaringType:  declType, provider : "HL7 2.x DSL - Group",  doc : "Access all repetitions of ${dslName}";
                }
            }
			if (isSegmentReturnType(m)){
				if (paramsMap.isEmpty()){
					property name: dslName, type: returnType, declaringType :declType, provider : "HL7 2.x DSL - Group", doc : "Navigates to the first repetition of ${dslName}";
				} else {
					method name: dslName, type:returnType, declaringType: declType,  params : paramsMap, provider : "HL7 2.x DSL - Group", doc : "Access a repetition of ${dslName}";
					method name: dslName, type:returnType, declaringType: declType, provider : "HL7 2.x DSL - Group",  doc : "Access all repetitions of ${dslName}";
				}
			}
        }
    }
    def declType = ClassHelper.make(GROUP_ADAPTER)
	method name:'isEmpty', type : Boolean, declaringType:  declType, provider : "HL7 2.x DSL - Group",  doc : "Returns true if the group is empty. Example: msgAdapter.PATIENT_RESULT(1).isEmpty()"
    property name:'path', type : String, declaringType:  declType, provider : "HL7 2.x DSL - Group",  doc : "Returns the path of the group in the message.Example: msgAdapter.PATIENT_RESULT(1).path"
    method name:'getPath', type : String, declaringType:  declType, provider : "HL7 2.x DSL - Group",  doc : "Returns the path of the group in the message. Example: msgAdapter.PATIENT_RESULT(1).getPath()"
	method name:'count', type : Integer, declaringType:  declType,  params : ['structure' : String], provider : "HL7 2.x DSL - Group",  doc : "Returns the number of repetitions of the give structure in the group"
	method name:'getTarget', type : currentType, declaringType:  declType,  provider : "HL7 2.x DSL - Group",  doc : "Returns the adapted (wrappped) group"
}

/*
 * Segment
 */
currentType(subType(SEGMENT)).accept {
	delegatesTo ClassHelper.make(SEGMENT_ADAPTER)
    method name: 'getAt', type: ClassHelper.make(TYPE_ADAPTER), declaringType: currentType, params : [field : Integer], provider : "HL7 2.x DSL - Segment", doc : "Access with repetition";
    method name:'isEmpty', type : Boolean, declaringType:  adapter(currentType), provider : "HL7 2.x DSL - Segment",  doc : "Returns true if the segment is empty. Example: msgAdapter.PATIENT_RESULT(1).PATIENT.PID.isEmpty()"
    property name:'path', type : String, declaringType:  currentType, provider : "HL7 2.x DSL - Segment",  doc : "Returns the path of the segment in the message. Example: msgAdapter.PATIENT_RESULT(1).PATIENT.PID.path returns \'PATIENT_RESULT(1).PATIENT.PID\'"
    method name:'getPath', type : String, declaringType:  currentType, provider : "HL7 2.x DSL - Segment",  doc : "Returns the path of the segment in the message. Example: msgAdapter.PATIENT_RESULT(1).PATIENT.PID.getPath() returns \'PATIENT_RESULT(1).PATIENT.PID\'"
    method name:'nrp', type : TYPE, params : [field : Integer], declaringType:  currentType, provider : "HL7 2.x DSL - Segment",  doc : "Adds a number of repetitions of the field to the segment. Example: message.PATIENT_RESULT(0).PATIENT.NK1(0).nrp(5) adds a repetition to NK1[5]"
    method name:'from', type: Void, params : [copy : currentType], declaringType:  currentType, provider : "HL7 2.x DSL - Segment",  doc : "Copy the argument in the current segment.Example: def mySegment = ...;     msg1.NK1(0).from(mySegment)"
    method name:'count', type: Integer, params : [field : Integer], declaringType:  currentType, provider : "HL7 2.x DSL - Segment",  doc : "Returns the number of repetitions of the j-th field. Example: segment.count(j)"
	method name:'getTarget', type : currentType, declaringType:  currentType,  provider : "HL7 2.x DSL - Segment",  doc : "Returns the adapted (wrappped) group"
}

currentType(subType(TYPE_ADAPTER)).accept {
	property name:'value', type : String, declaringType:  currentType, provider : "HL7 2.x DSL - Primitive",  doc : "Property to return/set the value"
}
/*
 *   Helper for the primitive adapter
 */
currentType(subType(PRIMITIVE_ADAPTER)).accept {
   def declType = ClassHelper.make(PRIMITIVE_ADAPTER)
   def primitiveClass = ClassHelper.make('ca.uhn.hl7v2.model.Primitive')
   //delegatesTo primitiveClass
   //Currently not possible to delegate to interface in DSLD, so declare the methods
   method name:'encode', type : String, declaringType:  declType, provider : "HL7 2.x DSL - Primitive",  doc : "Returns the literal value of the target primitive"
   method name:'name', type : String, declaringType:  declType, provider : "HL7 2.x DSL - Primitive",  doc : "Returns the name of the type (used in XML encoding and profile checking)"
   method name:'clear', type: Void, declaringType:  declType, provider : "HL7 2.x DSL - Primitive",  doc : "Clears all data from this primitive"
   property name:'value', type : String, declaringType:  declType, provider : "HL7 2.x DSL - Primitive",  doc : "Property to return/set the value"
}


